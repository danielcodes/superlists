Note taking for TDD Django

Think about how to implement these test for pipeline monitor
-functional test, ok
-unit tests, of course

Chapter 1, start django project 
Created first functional test with selenium and set up django boilerplate

======================== END OF CHAPTER ===============================

Chapter 2, functional test
Functional test, test the application, solve user stories - commented and readable
start using the unittest library and its helper functions

======================== END OF CHAPTER ===============================

Chapter 3, unit testing
-first write failing functional test, follow up with unit tests that fail as well, then write minimal code that passes these unit tests
-FT, for functionality. UT, for clean and bug free code
-unit test for home page, wrote views 404, mapped url NoneType, create function in views, pass
-TDD unit-test/code cycle, run tests, minimal code change to address failure

======================== END OF CHAPTER ===============================

Chapter 4, tests?
-TDD is a discipline, force yourself to do it. It's there to help when complexity starts getting out of hand
-using selenium's api to fill in the rest of the FT, can use bs4 here instead
-don't test constants rule, test logic flow control and configuration
-refactor, improve code without changing functionality
-TDD process, Functional tests, unit tests, unit-test/code cycle, refactoring
-writing units tests so that the functional test passes

======================== END OF CHAPTER ===============================

Chapter 5, saving user input
-If sleepy -> do not proceed any further, likely to write a bunch of typos -> frustration level over 9000
-test structure, setup, exercise function and assertions
-testing POST request through terminal only, passing input and checking if it's in the html body
-red, green and refactor, red - failing test, green - write code to make it pass, refactor - make the code better
-Django ORM, classes are tables, fields are columns, instances represent rows
-create the model we want on the test and slowly fill it up through each failing test
-when default prompt pops up, create default for the field
-redirect after a POST, to the homepage
-testing creates it's own database, always check the site manually

======================== END OF CHAPTER ===============================

Chapter 6, minimum viable site
-functional test messes with the application itself, needs cleanup aka garbage collection
-use liveservertestcase to improve functional test, solves the cleanup problem
-slowing easing into the new view without breaking anything, changed the regex method, not in python 2
-goals, items associated with diff lists, list/<category>, list/new, list/cats/<new-cat>
-deleting migratios in dangerous
-stick to copy and paste
-error where the url wasn't being match, traced back to the view and the error was in the template, the id was not passing properly
-test isolation, tests should not affect one another, working state to working state listen to the goat, yagni, ya ain't gon need it

BREAK - add test to pipeline

======================== END OF CHAPTER ===============================

Chapter 7, layout and styling, what to test
-grab bootstrap and throw it inside static files
-used a confusing test to check that things are centered
-using collectstatic for a web server to easily serve static files, wish I'd read this before deploying T_T
-things to look into, LESS, use {% static %} tag, bower
-do light tests on design and layout

======================== END OF CHAPTER ===============================

Chapter 8, testing deployment using a staging site
-danger areas: static files, database and dependencies
-workflow, staging site, run tests, use virtualenvs, and automate deployments
-run the FT's against the staging site (liveserver argument)
-two tasks, new server to host the code and deploying new code to the existing server
-getting confused again with this domain/server nonsense
-need permissions for provisioning, not deployment

On server side
STAGING
create a dir sites/, each each site, stage/ has 4 subfolders, database, source, static and virtualenv
if venv is managed with wrapper no need of one folder
create simple nginx config file and place in sites-available, create symlink to site-enableb/
make sure dev server can be started up, create databse and run tests again, the site should be ok

DEPLOYMENT
get gunicorm, the inner superlists.wsgi:application
initially no CSS, need to tell nginx about static files, do a collect static
define the static page in the nginx config file, reload nginx and start gunicorn
both sites, stage and live can both use port 8000, use unix sockets
some change in the nginx file and bind gunicorn
switch debug off and fill in allowed hosts
start gunicorm on boot, and reload if it crashes, use upstart

messed up the upstart job
use 'init-checkconf <file>' to 'ok' the syntax

going through a crapload of reading
ok, so first on the domain page registrar, we must poing to the digital ocean's name servers
after that's done, we can use A names to refer to the domain url, creating things such as test.domain.com
the question is, how can there be 2 sites generated, staging and production, wouldn't we need two servers?

======================== END OF CHAPTER ===============================

Chapter 9, automating deployment with fabric
use a fab file to automate deployment
the file contains functions that take care of the process, create dir structure, pulling down git repo
down to updating the settings, static files, database and virtualenv
took 3 tries, but alas got it, messed up the name TWICE
can create marks of significant phases in source code, use git tag 'name', then git push origin 'tag-name'

======================== END OF CHAPTER ===============================

Chapter 10, input validation and test organization
refactoring
blank inputs and repeated inputs, on both the main create list page, and each individual list
one test file for each class, a 'base' class that all tests will inherit from
refactor FT's into their own individual file
can validate input at two levels, model and form levels
separated the unit tests as well, first into their own folder and then into files
good practice to make tests/ right away, along with test_forms.py
forms
confused, model save doesn't run validation
first a model test and then test on the view, fails in the models and passes to the view?
view test must modify view, add error span to the template and be careful with escape characters
full clean is confusing, since it is used to validate empty inputs that means that it is already saving things, why add .save()??
processing POST requests in same view as render form, on the list view, make the form process in the same view
change that in the template, then create the test and THEN change the production code
-the ft is still failing when we try to add an empty item in a list
to fix this, add a test and fix the view, for a list on post, look out for a validation error
still don't understand why you need to do a save after full_clean??
might need a second look at this absolute url thing
on redirect, if the model has an absolute url, it looks for it there
there were 3 refactors for hardcoded urls, in templates use url name, in views define absolute url and model object to redirect, duplication of logic in views...
summary
organize test folders, FTs each in theri on file for their respective user stories, unit test, typically views, models and forms
red, green and refactor
don't refactor against failing tests
unless currently working on that FT, jot down refactor to do once you're back in a working state, don't commit @skips

======================== END OF CHAPTER ===============================

Chapter 11, a simple form
repetitive logic in views to handle validation -> code smell
forms in django can, process input and validate, used in templates to render html, can save to DB too
customize forms with widget, for larger forms use crispy or floppy
development driven tests, use unit to explore an API
auto-generate a form for a model with ModelForm, meta class to define the model and fields to display
created a form and tested it, now use it in the view
updated the input tag on the template with a field from the form, following units test
switching to a django form, changed the name of id of the input field, this breaks test as id is how sele finds elements
need for a big find and replace, in the FTs, and every other place where the id and name of the input element was used, use grep
there was one occurrence in the migrations too, didn't change that, I'm scared
changed view_list view to render somewher stupid, which in turn created an hour of grief
--minor setback putting a line where there shouldn't have been and starting way ahead...
form in a view that takes POST requests
refactor the way view handles post, now done through the django forms api
big change is that forms no contains all the data, so call forms.<field>
-main thing is the error message has not been fixed in the views
--typos are going to kill me
a crazy refactor, around an input tag with a change id and name...
can customize save method on forms, useful in the views, don't have to dig into the POST dictionary
forms and validation are importante

======================== END OF CHAPTER ===============================

Chapter 12, more advanced forms
avoiding duplicate items in the list
need to make it unique per list, not unique as in the only todo list item
don't compare django query sets with lists, put the query set in the list constructor
same db error, changing full_clean to save. type of error related





