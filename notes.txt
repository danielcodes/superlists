Note taking for TDD Django

Think about how to implement these test for pipeline monitor
-functional test, ok
-unit tests, of course

Chapter 1, start django project 
Created first functional test with selenium and set up django boilerplate

Chapter 2, functional test
Functional test, test the application, solve user stories - commented and readable
start using the unittest library and its helper functions

Chapter 3, unit testing
-first write failing functional test, follow up with unit tests that fail as well, then write minimal code that passes these unit tests
-FT, for functionality. UT, for clean and bug free code
-unit test for home page, wrote views 404, mapped url NoneType, create function in views, pass
-TDD unit-test/code cycle, run tests, minimal code change to address failure

Chapter 4, tests?
-TDD is a discipline, force yourself to do it. It's there to help when complexity starts getting out of hand
-using selenium's api to fill in the rest of the FT, can use bs4 here instead
-don't test constants rule, test logic flow control and configuration
-refactor, improve code without changing functionality
-TDD process, Functional tests, unit tests, unit-test/code cycle, refactoring
-writing units tests so that the functional test passes

Chapter 5, saving user input
-If sleepy -> do not proceed any further, likely to write a bunch of typos -> frustration level over 9000
-test structure, setup, exercise function and assertions
-testing POST request through terminal only, passing input and checking if it's in the html body
-red, green and refactor, red - failing test, green - write code to make it pass, refactor - make the code better
-Django ORM, classes are tables, fields are columns, instances represent rows
-create the model we want on the test and slowly fill it up through each failing test
-when default prompt pops up, create default for the field
-redirect after a POST, to the homepage
-testing creates it's own database, always check the site manually

Chapter 6, minimum viable site
-functional test messes with the application itself, needs cleanup aka garbage collection
-use liveservertestcase to improve functional test, solves the cleanup problem









